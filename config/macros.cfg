[save_variables]
filename: ~/klipper_config/config/variables.klip

# Helper script to park the carriage (called from T0 and T1 macros)
[gcode_macro _PARK_EXTRUDER]
gcode:
    {% set extruder = params.EXTRUDER %}
    SAVE_GCODE_STATE NAME=parkextruder
    G90
    {% if extruder == "extruder" %}
      G1 X{printer.configfile.config["stepper_x"].position_min|float + 2} F9000
    {% else %}
      G1 X{printer.configfile.config["dual_carriage"].position_max|float - 2} F9000
    {% endif %}
    RESTORE_GCODE_STATE NAME=parkextruder

# Activate the primary extruder / carriage
[gcode_macro T0]
variable_offset_applied: 0
gcode:
  {% if (printer.toolhead.extruder|lower == "extruder1") %}

    {% if ("x" in printer.toolhead.homed_axes) %}
      _PARK_EXTRUDER EXTRUDER="extruder1"
    {% else %}
      {action_respond_info("X axis not homed. Continuing...")}
    {% endif %}

    SET_DUAL_CARRIAGE CARRIAGE=0
    ACTIVATE_EXTRUDER EXTRUDER="extruder"
    SWAP_CLEAN
    G1 F9000

    {% if printer["gcode_macro T0"].offset_applied == 1 %}
        {action_respond_info("Removing g-code offsets...")}
        {% if ("z" in printer.toolhead.homed_axes) %}
          {% set z_move_allowed = 1 %}
        {% else %}
          {% set z_move_allowed = 0 %}
        {% endif %}
        {% set svv = printer.save_variables.variables %}
        SET_GCODE_OFFSET X_ADJUST={ -(svv.xoffset) } Y_ADJUST={ -(svv.yoffset) }
        SET_GCODE_OFFSET Z_ADJUST={ -(svv.zoffset) } MOVE={ z_move_allowed }
        SET_GCODE_VARIABLE MACRO=T0 VARIABLE=offset_applied VALUE=0
    {% endif %}
    {% set fan_speed = printer["gcode_macro M106"].swap_speed %}
    {% if fan_speed != -1 %}
      SET_FAN_SPEED FAN=fan_extruder SPEED={fan_speed}
      SET_FAN_SPEED FAN=fan_extruder1 SPEED=0
    {% else %}
      # Update core Klipper's fan speed to the fan speed of the active toolhead
      # Only do this if you have a sacrificial [fan] section
      M106.1 S{printer["fan_generic fan_extruder"].speed * 255}
    {% endif %}
    #SET_INPUT_SHAPER shaper_freq_x=53.2
  {% endif %}

# Activate the secondary extruder / carriage
[gcode_macro T1]
gcode:
  {% if (printer.toolhead.extruder|lower == "extruder") %}
    {% if ("x" in printer.toolhead.homed_axes) %}
      _PARK_EXTRUDER EXTRUDER="extruder"
    {% else %}
      {action_respond_info("X axis not homed. Continuing...")}
    {% endif %}

    SET_DUAL_CARRIAGE CARRIAGE=1
    ACTIVATE_EXTRUDER EXTRUDER="extruder1"
    SWAP_CLEAN
    G1 F9000

    {% if printer["gcode_macro T0"].offset_applied == 0 %}
        {action_respond_info("Applying g-code offsets...")}
        {% if ("z" in printer.toolhead.homed_axes) %}
          {% set z_move_allowed = 1 %}
        {% else %}
          {% set z_move_allowed = 0 %}
        {% endif %}
        {% set svv = printer.save_variables.variables %}
        SET_GCODE_OFFSET X_ADJUST={ svv.xoffset } Y_ADJUST={ svv.yoffset }
        SET_GCODE_OFFSET Z_ADJUST={ svv.zoffset } MOVE={ z_move_allowed }
        SET_GCODE_VARIABLE MACRO=T0 VARIABLE=offset_applied VALUE=1
    {% endif %}
    {% set fan_speed = printer["gcode_macro M106"].swap_speed %}
    {% if fan_speed != -1 %}
      SET_FAN_SPEED FAN=fan_extruder1 SPEED={fan_speed}
      SET_FAN_SPEED FAN=fan_extruder SPEED=0
    {% else %}
      # Update core Klipper's fan speed to the fan speed of the active toolhead
      # Only do this if you have a sacrificial [fan] section
      M106.1 S{printer["fan_generic fan_extruder1"].speed * 255}
    {% endif %}
    #SET_INPUT_SHAPER shaper_freq_x=42.0
  {% endif %}

[gcode_macro SWAP_CLEAN]
gcode:
    G1 E20 F200
    G1 E-2 F1800

[gcode_macro PROGRAM_START]
## PrusaSliser: 
# M190 S0
# M109 S0
# SET_DUAL_CARRIAGE_MODE MODE=FULL_CONTROL
# ;SET_DUAL_CARRIAGE_MODE MODE=DUPLICATION
# ;SET_DUAL_CARRIAGE_MODE MODE=MIRRORED
# START_PRINT EXTRUDER=[current_extruder] EXTRUDERS=[current_extruder] EXTRUDER_TEMP={first_layer_temperature[0]} EXTRUDER1_TEMP={first_layer_temperature[1]} BED_TEMP={first_layer_bed_temperature}
gcode:
  {% set temp0 = params.TEMP0|int %}
  {% set temp1 = params.TEMP1|int %}
  {% set bedtemp = [params.BEDTEMP0|int, params.BEDTEMP1|int]|max %}
  {% set no_ooze_temp0 = [temp0|int, 180]|min %}
  {% set no_ooze_temp1 = [temp1|int, 180]|min %}
  M117 Resetting...
  M220 S100 ; reset speed
  M221 S100 ; reset extrusion rate
  CLEAR_PAUSE
  # Metric values
  G21
  # Absolute positioning
  G90 
  # Set extruder to absolute mode
  M82
  # Set initial warmup temps
  M117 Nozzle and bed preheat (no-ooze temp)
  M104 S{no_ooze_temp0} T0 ; set extruder0 no-ooze temp
  M104 S{no_ooze_temp1} T1 ; set extruder1 no-ooze temp
  M190 S{bedtemp}
  # Run the customizable "PARK" macro
  M117 Homing...
  G28 ; home all axes
  M117 Adjusting Z axis tilt...
  Z_TILT_ADJUST
  M117 Re-homing Z
  G28 Z
  G0 Z10; Raise nozzle before warmup
  _PARK_EXTRUDER EXTRUDER=extruder
  M117 Final warmup...
  M104 S{temp0} T0 ; set extruder0 final temp
  M104 S{temp1} T1 ; set extruder1 final temp
  M109 S{temp0} T0 ; wait for extruder0 final temp
  M109 S{temp1} T1 ; wait for extruder1 final temp
  M117 Purging extruders...


  {% if printer.dual_carriage.mode == "DUPLICATION" %}
      SET_DUAL_CARRIAGE CARRIAGE=1
      G1 X{printer.toolhead.axis_maximum.x/2} F6000
      SET_DUAL_CARRIAGE CARRIAGE=0
  {% endif %}
  {% if printer.dual_carriage.mode == "FULL_CONTROL" %}
    SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE=extruder1
    {% if temp1 > 160 %}
      T1
      G92 E0     ; reset extruder
      G1 Z1.0 F3000    ; move z up little to prevent scratching of surface
      G1 X285 Y40 Z0.3 F5000.0  ; move to start-line position
      G1 X285 Y100.0 Z0.3 F500.0 E15  ; draw 1st line
      G1 X285.5 Y100.0 Z0.3 F5000.0  ; move to side a little
      G1 X285.5 Y40 Z0.3 F500.0 E30  ; draw 2nd line      G1 Z1.0 F3000    ; move z up little to prevent scratching of surface
      G1 Z1.0 F3000
      G92 E0.0 ; reset extrusion distance
    {% endif %}
  {% else %}
    SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE=extruder
    {% if temp0 > 160 %}
      T0
      G92 E0     ; reset extruder
      G1 Z0.5 F3000    ; move z up little to prevent scratching of surface
      G1 X5 Y40 Z0.3 F3000.0  ; move to start-line position
      G1 X5 Y100.0 Z0.3 F500.0 E15  ; draw 1st line
      G1 X5.4 Y100.0 Z0.3 F5000.0  ; move to side a little
      G1 X5.4 Y40 Z0.3 F500.0 E30  ; draw 2nd line
      G1 Z1.0 F3000    ; move z up little to prevent scratching of surface
      G92 E0.0 ; reset extrusion distance
    {% endif %}
  {% endif %}
    
  M117 Making magic...


[gcode_macro FAST_START]
gcode:
  {% set temp0 = params.TEMP0|int %}
  {% set temp1 = params.TEMP1|int %}
  {% set bedtemp = [params.BEDTEMP0|int, params.BEDTEMP1|int]|max %}
  {% set no_ooze_temp0 = [temp0|int, 180]|min %}
  {% set no_ooze_temp1 = [temp1|int, 180]|min %}
  M117 Resetting...
  M220 S100 ; reset speed
  M221 S100 ; reset extrusion rate
  CLEAR_PAUSE
  # Metric values
  G21
  # Absolute positioning
  G90 
  # Set extruder to absolute mode
  M82
  M117 Warmup...
  M104 S{temp0} T0 ; set extruder0 final temp
  M104 S{temp1} T1 ; set extruder1 final temp
  # Run the customizable "PARK" macro
  M117 Homing...
  G28 ; home all axes
  G0 Z10; Raise nozzle before warmup
  _PARK_EXTRUDER EXTRUDER=extruder
  M109 S{temp0} T0 ; wait for extruder0 final temp
  M109 S{temp1} T1 ; wait for extruder1 final temp
  M190 S{bedtemp}
  M117 Making magic...


# Configure this to draw 2 line segments perpendicular to the dual_carraige axis
# that meet in the middle of the bed. Both lines should have the same coordinate
# on the axis of the dual_carraige. If they don't print inline, adjust your endstop
# settings.
[gcode_macro set_separation]
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set oldX = svv.xoffset|float %}
    {% set oldY = svv.yoffset|float %}
    {% set oldZ = svv.zoffset|float %}

    {% if params.X is defined %}
        SAVE_VARIABLE VARIABLE=xoffset VALUE={ params.X|float }
    {% endif %}
    {% if params.Y is defined %}
        SAVE_VARIABLE VARIABLE=yoffset VALUE={ params.Y|float }
    {% endif %}
    {% if params.Z is defined %}
        SAVE_VARIABLE VARIABLE=zoffset VALUE={ params.Z|float }
    {% endif %}

    {% if params.X_ADJUST is defined %}
        {% set newX = params.X_ADJUST|float + oldX %}
        SAVE_VARIABLE VARIABLE=xoffset VALUE={ newX|float }
    {% endif %}
    {% if params.Y_ADJUST is defined %}
        {% set newY = params.Y_ADJUST|float + oldY %}
        SAVE_VARIABLE VARIABLE=yoffset VALUE={ newY|float }
    {% endif %}
    {% if params.Z_ADJUST is defined %}
        {% set newZ = params.Z_ADJUST|float + oldZ %}
        SAVE_VARIABLE VARIABLE=yoffset VALUE={ newZ|float }
    {% endif %}

[gcode_macro calibrate_separation]
gcode:
    #G28
    G90
    M83
    T0 ; test T0
    G1 X120 Y150 Z.2 F4800
    G1 Y75 E10
    T1 ; test T1
    G1 Z0.2
    G1 X120 Y0
    G1 Y75 E10

[gcode_macro _SET_TOOL_FAN]
variable_speed: 0
gcode:
    SET_FAN_SPEED FAN=fan_{printer.toolhead.extruder} SPEED={params.SPEED}
    # Store the fan speed so that we can carry it over during toolchanges.
    SET_GCODE_VARIABLE MACRO=_SET_TOOL_FAN VARIABLE=speed VALUE={params.SPEED}

[gcode_macro M106]
# Only rename_existing if you have a sacrificial [fan] section
rename_existing: M106.1
# The variable that controls fan speed swapping if not specifying P parameter
# -1 means the control is disabled, a value of 0-1 is the requested fan speed.
# Access via {printer["gcode_macro M106"].swap_speed}
variable_swap_speed: -1
gcode:
    {% set s = [[params.S|default(255)|int, 255]|min, 0]|max %}
    {% set p = params.P|default(-1)|int %}
    {% set speed = s / 255 %}

    # Set speed to -1 by default
    SET_GCODE_VARIABLE MACRO=M106 VARIABLE=swap_speed VALUE=-1

    {% if p == -1 %}
      # Set current active extruder fan
      {% if speed == 0 %}
        # Always turn off al fans if S0 is specified without a specific fan
        SET_FAN_SPEED FAN=fan_extruder SPEED=0
        SET_FAN_SPEED FAN=fan_extruder1 SPEED=0
      {% else %}
        # Opt into fan speed swap control
        SET_GCODE_VARIABLE MACRO=M106 VARIABLE=swap_speed VALUE={speed}
        SET_FAN_SPEED FAN=fan_{printer.toolhead.extruder} SPEED={speed}
      {% endif %}
    {% else %}
      # Set specified active extruder fan
      {% if p == 0 %}
        SET_FAN_SPEED FAN=fan_extruder SPEED={speed}
      {% else %}
        SET_FAN_SPEED FAN=fan_extruder1 SPEED={speed}
      {% endif %}
    {% endif %}

    # Update core Klipper's fan speed
    # Only do this if you have a sacrificial [fan] section
    M106.1 S{s}

[gcode_macro M107]
rename_existing: M107.1
gcode:
    {% set p = params.P|default(-1)|int %}
    M106 S0 P{p}

# The end_print macro is also called from CANCEL_PRINT.
[gcode_macro PROGRAM_END]
gcode:
  M106 S0 ; turn off cooling fan
  # Extruder heater off
  M104 S0 T0
  M104 S0 T1
  # Bed heater off
  M140 S0
  # Relative positioning
  G91
  # Retract the filament a bit before lifting the nozzle.
  G1 E-2 F3600
  # Move to safe Z position
  G0 Z10 F3600
  # Retract filament even more
  G1 E-2 F3600
  _PARK_EXTRUDER EXTRUDER={printer.toolhead.extruder}
  SET_DUAL_CARRIAGE_MODE MODE=FULL_CONTROL
  SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE=extruder1  
  {% if (printer.toolhead.extruder == "extruder1") %}
      T0
  {% endif %}
  # Absolute positioning
  G90
  # Bring bed forward
  G0 Y{printer.toolhead.axis_maximum.y - 5} F9000
  # Steppers off
  M84
  # Part cooling fan off
  M117 Done.

[gcode_macro G28]
rename_existing: G28.1
gcode:
  #SAVE_GCODE_STATE NAME=HOMING_state
  {% if printer.toolhead.extruder|lower == "extruder1" %}
      T0
      G28.1 {"X" if params.X is defined} {"Y" if params.Y is defined} {"Z" if params.Z is defined} 
      T1
  {% else %}
      G28.1 {"X" if params.X is defined} {"Y" if params.Y is defined} {"Z" if params.Z is defined} 
  {% endif %}
  #RESTORE_GCODE_STATE NAME=HOMING_state

#####
# GENERAL MACROS
#####

[gcode_macro PAUSE]
rename_existing: PAUSE_BASE
variable_extrude: 1.0
gcode:
  SAVE_GCODE_STATE NAME=PAUSE_state
  # Define park positions 
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  {% set speed = 150*60 %}
  # Calculate safe Z position
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 2.0) %}
      {% set z_safe = 2.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  PAUSE_BASE
  G91
  # Retract
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G1 E-{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  # Move to park position
  {% if "xyz" in printer.toolhead.homed_axes %}
    G1 Z{z_safe} F900
    G90
    _PARK_EXTRUDER EXTRUDER={printer.toolhead.extruder}
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}

[gcode_macro RESUME]
rename_existing: RESUME_BASE
gcode:
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  # Prime
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G91
    G1 E{E} F2100
    G90
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  RESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1
  RESUME_BASE

[gcode_macro CANCEL_PRINT]
rename_existing: CANCEL_PRINT_BASE
gcode:
  PROGRAM_END
  TURN_OFF_HEATERS
  CLEAR_PAUSE
  CANCEL_PRINT_BASE

[gcode_macro FILAMENT_CHANGE]
gcode:
	SAVE_GCODE_STATE NAME=CHANGE_FILAMENT_STATE
	{% set timer = params.T|default(60)|float %}
	{% set unload = params.U|default(70)|float %}
	{% set load = params.L|default(100)|float %}
    {% if printer.pause_resume.is_paused %}
        RESPOND TYPE=command MSG="Already paused"
    {% else %}
        {% if printer.toolhead.homed_axes != "xyz" %}
            RESPOND TYPE=command MSG="Homing"
            G28                                                                     # home if not homed
        {% else %}
            RESPOND TYPE=command MSG="Pausing print"
            PAUSE
        {% endif %}
    {% endif %}
    RESPOND TYPE=command MSG="Changing filament..."
	SET_IDLE_TIMEOUT TIMEOUT=600
	FILAMENT_UNLOAD U={unload}
	RESTORE_GCODE_STATE NAME=CHANGE_FILAMENT_STATE

[gcode_macro FILAMENT_LOAD]
gcode:
    {% set load = params.L|default(100)|float * 0.5 %}
	{% set extruder_temp = params.T|default(225)|float %}
	SAVE_GCODE_STATE NAME=LOAD_FILAMENT_STATE
	LOW_TEMP_CHECK T={extruder_temp}
    RESPOND TYPE=command MSG="Loading filament..."
	M83
	G1 E{load} F400
	G4 P500
	G1 E{load} F150
    M400                                                                         # wait until all moves are completed
    RESPOND TYPE=command MSG="Filament loaded!"
	RESTORE_GCODE_STATE NAME=LOAD_FILAMENT_STATE
    # SET_FILAMENT_SENSOR SENSOR=motion_sensor ENABLE=1
    # SET_FILAMENT_SENSOR SENSOR=motion_sensor1 ENABLE=1

[gcode_macro FILAMENT_UNLOAD]
gcode:
	{% set unload = params.U|default(80)|float %}
	{% set extruder_temp = params.T|default(225)|float %}
    # SET_FILAMENT_SENSOR SENSOR=motion_sensor ENABLE=0
    # SET_FILAMENT_SENSOR SENSOR=motion_sensor1 ENABLE=0
	SAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_STATE
	LOW_TEMP_CHECK T={extruder_temp}
    RESPOND TYPE=command MSG="Unloading filament..."
	M83
	G1 E3 F200
	G1 E-10 F200
	G1 E-{unload} F1000
    M400                                                                        # wait until all moves are completed
    RESPOND TYPE=command MSG="Filament unloaded!"
	RESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_STATE

  [gcode_macro M500]                                                              # Save Settings
gcode:
    SAVE_CONFIG

[gcode_macro M76]
gcode: 
	PAUSE

[gcode_macro M601]
gcode:
  PAUSE

[gcode_macro G27]
gcode:
	PARK

[gcode_macro M125]
gcode:
	PARK

[gcode_macro M600]
gcode: 
	FILAMENT_CHANGE

[gcode_macro M701]
gcode: 
	FILAMENT_LOAD

[gcode_macro M702]
gcode: 
	FILAMENT_UNLOAD