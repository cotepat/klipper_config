[save_variables]
filename: ~/klipper_config/config/variables.klip

[gcode_macro PROGRAM_START]
gcode:
  {% set temp0 = params.TEMP0|default(0)|int %}
  {% set temp1 = params.TEMP1|default(0)|int %}
  {% set bedtemp = params.BEDTEMP|int %}
  {% set no_ooze_temp0 = [temp0|int, 180]|min %}
  {% set no_ooze_temp1 = [temp1|int, 180]|min %}
  {% set idex_mode = params.IDEX|default(FULL_CONTROL) %}
  {% set purge = params.PURGE|default(1) %}

  {% if idex_mode in [('DUPLICATION'),('MIRRORED')] %}
      {% if temp1 == 0 %}
          M117 Setting temp1 to temp0 value
          {% set temp1 = temp0 %}
          {% set no_ooze_temp1 = [temp0|int, 180]|min %}
      {% endif %}
  {% endif %}

  M117 Loading Bed Mesh profile...
  BED_MESH_PROFILE LOAD=default

  SET_DUAL_CARRIAGE_MODE MODE="FULL_CONTROL"
  SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE=extruder1
  SET_DUAL_CARRIAGE CARRIAGE=0
  ACTIVATE_EXTRUDER EXTRUDER="extruder"
  T0

  M117 Resetting...
  M220 S100 ; reset speed
  M221 S100 ; reset extrusion rate
  CLEAR_PAUSE
  # Metric values
  G21
  # Absolute positioning
  G90 
  # Set extruder to absolute mode
  M82
  # Set initial warmup temps


  M117 Nozzle and bed preheat (no-ooze temp)

  SET_HEATER_TEMPERATURE HEATER=extruder TARGET={no_ooze_temp0} ; set extruder0 no-ooze temp
  SET_HEATER_TEMPERATURE HEATER=extruder1 TARGET={no_ooze_temp1} ; set extruder1 no-ooze temp
  
  M190 S{bedtemp}

  {% if printer.toolhead.homed_axes != "xyz" %}

    M117 Homing...
    G28 ; home all axes
    M117 Adjusting Z axis tilt...
    Z_TILT_ADJUST
    M117 Re-homing Z
    G28 Z

  {% endif %}

  G0 Z10; Raise nozzle before warmup
  _PARK_EXTRUDER EXTRUDER=extruder
  M117 Final warmup...
  M104 S{temp0} T0 ; set extruder0 final temp
  M104 S{temp1} T1 ; set extruder1 final temp
  {% if temp0 > 0 %}
    M109 S{temp0} T0 ; wait for extruder0 final temp
  {% endif %}
  {% if temp1 > 0 %}
    M109 S{temp1} T1 ; wait for extruder1 final temp
  {% endif %}

  M117 Purging extruders...

  {% if idex_mode == "DUPLICATION" %}
      M117 Setting IDEX DUPLICATION mode...
      T0
      T1
      G1 X{(printer.toolhead.axis_maximum.x/2) - 25} F6000
      SET_DUAL_CARRIAGE CARRIAGE=0
      ACTIVATE_EXTRUDER EXTRUDER="extruder1"
      ACTIVATE_EXTRUDER EXTRUDER="extruder"
      SET_DUAL_CARRIAGE_MODE MODE={idex_mode}
      SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE=extruder
      {% if temp0 > 160 and temp1 > 160 and purge == 1 %}
        PURGE_EXTRUDER EXT_NUM=0
      {% endif %}
  {% elif idex_mode == "MIRRORED" %}
      M117 Setting IDEX MIRRORED mode...
      T1
      T0
      SET_DUAL_CARRIAGE CARRIAGE=0
      ACTIVATE_EXTRUDER EXTRUDER="extruder1"
      ACTIVATE_EXTRUDER EXTRUDER="extruder"
      SET_DUAL_CARRIAGE_MODE MODE={idex_mode}
      SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE=extruder
      {% if temp0 > 160 and temp1 > 160 and purge == 1 %}
        PURGE_EXTRUDER EXT_NUM=0
      {% endif %}
  {% else %}
      {% if temp0 >= 160 and purge == 1 %}
        PURGE_EXTRUDER EXT_NUM=0
      {% endif %}
      {% if temp1 >= 160 and purge == 1 %}
        T1
        PURGE_EXTRUDER EXT_NUM=1
      {% endif %}
  {% endif %}

  M117 Making magic...

[gcode_macro PREP_START]
gcode:
    {% set BT = params.BED|default(65)|int %}
	{% set T_0 = params.TEMP0|default(180)|int %}
    {% set T_1 = params.TEMP1|default(180)|int %}
    {% set do_purge = params.PURGE|default(0)|int %}
    PROGRAM_START TEMP0={T_0} TEMP1={T_1} BEDTEMP={BT} PURGE={do_purge}

[gcode_macro PURGE_EXTRUDER]
gcode:
    {% set extnum = params.EXT_NUM|int %}
    {% if extnum == 0 %}
        G92 E0     ; reset extruder
        G1 Z0.5 F3000    ; move z up little to prevent scratching of surface
        G1 X5 Y40 Z0.3 F3000.0  ; move to start-line position
        G1 X5 Y100.0 Z0.3 F500.0 E15  ; draw 1st line
        G1 X5.4 Y100.0 Z0.3 F5000.0  ; move to side a little
        G1 X5.4 Y40 Z0.3 F500.0 E30  ; draw 2nd line
        G1 Z1.0 F3000    ; move z up little to prevent scratching of surface
        G92 E0.0 ; reset extrusion distance
    {% else %}
        G92 E0     ; reset extruder
        G1 Z1.0 F3000    ; move z up little to prevent scratching of surface
        G1 X295 Y40 Z0.3 F5000.0  ; move to start-line position
        G1 X295 Y100.0 Z0.3 F500.0 E15  ; draw 1st line
        G1 X295.5 Y100.0 Z0.3 F5000.0  ; move to side a little
        G1 X295.5 Y40 Z0.3 F500.0 E30  ; draw 2nd line      G1 Z1.0 F3000    ; move z up little to prevent scratching of surface
        G1 Z1.0 F3000
        G92 E0.0 ; reset extrusion distance
    {% endif %}

[gcode_macro STOP_MOTORS]
gcode:
    M84

# Helper script to park the carriage (called from T0 and T1 macros)
[gcode_macro _PARK_EXTRUDER]
gcode:
    {% set extruder = params.EXTRUDER %}
    SAVE_GCODE_STATE NAME=parkextruder
    G90
    {% if extruder == "extruder" %}
      G1 X{printer.configfile.config["stepper_x"].position_min|float + 2} F9000
    {% else %}
      G1 X{printer.configfile.config["dual_carriage"].position_max|float - 2} F9000
    {% endif %}
    RESTORE_GCODE_STATE NAME=parkextruder

# Activate the primary extruder / carriage
[gcode_macro T0]
variable_offset_applied: 0
gcode:
  {% if (printer.toolhead.extruder|lower == "extruder1") %}

    {% if ("x" in printer.toolhead.homed_axes) %}
      _PARK_EXTRUDER EXTRUDER="extruder1"
    {% else %}
      {action_respond_info("X axis not homed. Continuing...")}
    {% endif %}

    SET_DUAL_CARRIAGE CARRIAGE=0
    ACTIVATE_EXTRUDER EXTRUDER="extruder"
    #SWAP_CLEAN
    G1 F9000

    {% if printer["gcode_macro T0"].offset_applied == 1 %}
        {action_respond_info("Removing g-code offsets...")}
        {% if ("z" in printer.toolhead.homed_axes) %}
          {% set z_move_allowed = 1 %}
        {% else %}
          {% set z_move_allowed = 0 %}
        {% endif %}
        {% set svv = printer.save_variables.variables %}
        SET_GCODE_OFFSET X_ADJUST={ -(svv.xoffset) } Y_ADJUST={ -(svv.yoffset) }
        SET_GCODE_OFFSET Z_ADJUST={ -(svv.zoffset) } MOVE={ z_move_allowed }
        SET_GCODE_VARIABLE MACRO=T0 VARIABLE=offset_applied VALUE=0
    {% endif %}
    {% set fan_speed = printer["gcode_macro M106"].swap_speed %}
    {% if fan_speed != -1 %}
      SET_FAN_SPEED FAN=fan_extruder SPEED={fan_speed}
      SET_FAN_SPEED FAN=fan_extruder1 SPEED=0
    {% else %}
      # Update core Klipper's fan speed to the fan speed of the active toolhead
      # Only do this if you have a sacrificial [fan] section
      M106.1 S{printer["fan_generic fan_extruder"].speed * 255}
    {% endif %}
    #SET_INPUT_SHAPER shaper_freq_x=53.2
  {% endif %}

# Activate the secondary extruder / carriage
[gcode_macro T1]
gcode:
  {% if (printer.toolhead.extruder|lower == "extruder") %}
    {% if ("x" in printer.toolhead.homed_axes) %}
      _PARK_EXTRUDER EXTRUDER="extruder"
    {% else %}
      {action_respond_info("X axis not homed. Continuing...")}
    {% endif %}

    SET_DUAL_CARRIAGE CARRIAGE=1
    ACTIVATE_EXTRUDER EXTRUDER="extruder1"
    #SWAP_CLEAN
    G1 F9000

    {% if printer["gcode_macro T0"].offset_applied == 0 %}
        {action_respond_info("Applying g-code offsets...")}
        {% if ("z" in printer.toolhead.homed_axes) %}
          {% set z_move_allowed = 1 %}
        {% else %}
          {% set z_move_allowed = 0 %}
        {% endif %}
        {% set svv = printer.save_variables.variables %}
        SET_GCODE_OFFSET X_ADJUST={ svv.xoffset } Y_ADJUST={ svv.yoffset }
        SET_GCODE_OFFSET Z_ADJUST={ svv.zoffset } MOVE={ z_move_allowed }
        SET_GCODE_VARIABLE MACRO=T0 VARIABLE=offset_applied VALUE=1
    {% endif %}
    {% set fan_speed = printer["gcode_macro M106"].swap_speed %}
    {% if fan_speed != -1 %}
      SET_FAN_SPEED FAN=fan_extruder1 SPEED={fan_speed}
      SET_FAN_SPEED FAN=fan_extruder SPEED=0
    {% else %}
      # Update core Klipper's fan speed to the fan speed of the active toolhead
      # Only do this if you have a sacrificial [fan] section
      M106.1 S{printer["fan_generic fan_extruder1"].speed * 255}
    {% endif %}
    #SET_INPUT_SHAPER shaper_freq_x=42.0
  {% endif %}


[gcode_macro _SET_TOOL_FAN]
variable_speed: 0
gcode:
    SET_FAN_SPEED FAN=fan_{printer.toolhead.extruder} SPEED={params.SPEED}
    # Store the fan speed so that we can carry it over during toolchanges.
    SET_GCODE_VARIABLE MACRO=_SET_TOOL_FAN VARIABLE=speed VALUE={params.SPEED}

[gcode_macro M106]
# Only rename_existing if you have a sacrificial [fan] section
rename_existing: M106.1
# The variable that controls fan speed swapping if not specifying P parameter.
# -1 means the control is disabled, a value of 0-1 is the requested fan speed.
# Access via {printer["gcode_macro M106"].swap_speed}
variable_swap_speed: -1
gcode:
    {% set s = [[params.S|default(255)|int, 255]|min, 0]|max %}
    {% set p = params.P|default(5)|int %}
    {% set speed = s / 255 %}

    # Set speed to -1 by default
    SET_GCODE_VARIABLE MACRO=M106 VARIABLE=swap_speed VALUE=-1

    {% if p == 5 %}
      # Set current active extruder fan
      {% if speed == 0 %}
        # Always turn off al fans if S0 is specified without a specific fan
        SET_FAN_SPEED FAN=fan_extruder SPEED=0
        SET_FAN_SPEED FAN=fan_extruder1 SPEED=0
      {% else %}
        # Opt into fan speed swap control
        {% if printer.dual_carriage.mode == "FULL_CONTROL" %}
          SET_GCODE_VARIABLE MACRO=M106 VARIABLE=swap_speed VALUE={speed}
          SET_FAN_SPEED FAN=fan_{printer.toolhead.extruder} SPEED={speed}
        {% else %}
          SET_FAN_SPEED FAN=fan_extruder SPEED={speed}
          SET_FAN_SPEED FAN=fan_extruder1 SPEED={speed}
        {% endif %}
      {% endif %}
    {% else %}
      # Set specified active extruder fan
      {% if p == 0 %}
        SET_FAN_SPEED FAN=fan_extruder SPEED={speed}
      {% else %}
        SET_FAN_SPEED FAN=fan_extruder1 SPEED={speed}
      {% endif %}
    {% endif %}

    # Update core Klipper's fan speed
    # Only do this if you have a sacrificial [fan] section
    M106.1 S{s}

[gcode_macro M107]
rename_existing: M107.1
gcode:
    {% set p = params.P|default(5)|int %}
    M106 S0 P{p}

# The end_print macro is also called from CANCEL_PRINT.
[gcode_macro PROGRAM_END]
gcode:
  SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE=extruder1

  M106 S0 ; turn off cooling fan
  # Extruder heater off
  M104 S0 T0
  M104 S0 T1
  # Bed heater off
  M140 S0
  # Relative positioning
  G91
  # Retract the filament a bit before lifting the nozzle.
  G1 E-2 F3600
  # Move to safe Z position
  G0 Z10 F3600
  # Retract filament even more
  G1 E-2 F3600

  # Absolute positioning
  G90
  # Bring bed forward
  G0 Y{printer.toolhead.axis_maximum.y - 5} F9000

  SET_DUAL_CARRIAGE_MODE MODE="FULL_CONTROL"
  SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE=extruder1
  SET_DUAL_CARRIAGE CARRIAGE=0
  ACTIVATE_EXTRUDER EXTRUDER="extruder"
  T0
  T1
  T0

  M117 Done.

[gcode_macro G28]
rename_existing: G28.1
gcode:
  #SAVE_GCODE_STATE NAME=HOMING_state
  {% if printer.toolhead.extruder|lower == "extruder1" %}
      T0
      G28.1 {"X" if params.X is defined} {"Y" if params.Y is defined} {"Z" if params.Z is defined} 
      T1
  {% else %}
      G28.1 {"X" if params.X is defined} {"Y" if params.Y is defined} {"Z" if params.Z is defined} 
  {% endif %}
  #RESTORE_GCODE_STATE NAME=HOMING_state

#####
# GENERAL MACROS
#####

[gcode_macro PAUSE]
rename_existing: PAUSE_BASE
variable_extrude: 1.0
gcode:
  SAVE_GCODE_STATE NAME=PAUSE_state
  # Define park positions 
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  {% set speed = 150*60 %}
  # Calculate safe Z position
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 2.0) %}
      {% set z_safe = 2.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  PAUSE_BASE
  G91
  # Retract
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G1 E-{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  # Move to park position
  {% if "xyz" in printer.toolhead.homed_axes %}
    G1 Z{z_safe} F900
    G90
    _PARK_EXTRUDER EXTRUDER={printer.toolhead.extruder}
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}

[gcode_macro RESUME]
rename_existing: RESUME_BASE
gcode:
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  # Prime
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G91
    G1 E{E} F2100
    G90
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  RESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1
  RESUME_BASE

[gcode_macro CANCEL_PRINT]
rename_existing: CANCEL_PRINT_BASE
gcode:
  PROGRAM_END
  TURN_OFF_HEATERS
  CLEAR_PAUSE
  CANCEL_PRINT_BASE

[gcode_macro M201]
gcode:
  {% if 'X' in params or 'Y' in params %}
    {% set accel = (params.X|default(params.Y)|float,
                    params.Y|default(params.X)|float)|min %}
      SET_VELOCITY_LIMIT ACCEL={accel} ACCEL_TO_DECEL={accel * 0.5}
  {% else %}
    SET_VELOCITY_LIMIT
  {% endif %}

[gcode_macro M203]
gcode:
  {% if 'X' in params or 'Y' in params %}
    {% set speed = (params.X|default(params.Y)|float,
                       params.Y|default(params.X)|float)|min %}
    SET_VELOCITY_LIMIT VELOCITY={speed}
  {% else %}
    SET_VELOCITY_LIMIT
  {% endif %}

[gcode_macro M205]
gcode:
  {% if 'X' in params or 'Y' in params %}
    {% set corner_speed = (params.X|default(params.Y)|float,
                       params.Y|default(params.X)|float)|min %}
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={corner_speed}
  {% else %}
    SET_VELOCITY_LIMIT
  {% endif %}

[gcode_macro M900]
gcode:
